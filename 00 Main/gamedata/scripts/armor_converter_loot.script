-- control where these kits are populated

-- im lazy
-- 60/30/10 split
map_tiers = {
    ["l01_escape"]				= "paintkit_novice,2", -- cordon
    ["y04_pole"]				= "paintkit_novice,4", -- Meadow
    ["k01_darkscape"]			= "paintkit_sunrise,4", -- Darkscape
    ["l03_agroprom"]			= "paintkit_sunrise,2", -- Agroprom
    ["l04_darkvalley"]			= "paintkit_trenchcoat,2", -- Dark Valley
    ["k02_trucks_cemetery"]		= "paintkit_trenchcoat,4", -- Truck Cemetery
	
    ["l03u_agr_underground"]	= "gunkit_paint,4", -- Agroprom Underground
    ["l04u_labx18"]				= "gunkit_gunsmith,4", -- Lab X-18 (Dark Valley)
	
    ["l06_rostok"]              = "paintkit_duty_ps5,4", -- Wild Territory
    ["l08_yantar"]              = "paintkit_merc_lcs,4", -- Yantar
	
    ["l08u_brainlab"]			= "gunkit_replace,2", -- Lab X-16 (Yantar)
    ["l11_hospital"]			= "gunkit_replace,4", -- Deserted Hospital
	
    ["l10_red_forest"]			= "paintkit_merc_tactical,2", -- Red Forest
    ["l11_pripyat"]				= "paintkit_merc_tactical,4", -- Pripyat
    ["l10_limansk"]				= "paintkit_skat,2", -- Limansk
    ["pripyat"]					= "paintkit_skat,4", -- Outskirts 
	
    ["l10u_bunker"]				= "gunkit_custom,3", -- Lab X-19 (Radar)
    ["jupiter_underground"]		= "gunkit_custom,3", -- Jupiter Underground
	
    ["l10_radar"]				= "paintkit_eco_ssp,2", -- Radar
    ["jupiter"]					= "paintkit_eco_ssp,2", -- Jupiter
    
    ["zaton"]					= "paintkit_ace,1", -- Zaton
	
    ["l12_stancia"]				= "gunkit_mono,1", -- Chernobyl NPP South
    ["l12u_sarcofag"]			= "paintkit_exo,1", -- Sarcophagus (NPP North)
    ["l12_stancia_2"]			= "paintkit_nosorog,1", -- Chernobyl NPP North
    ["l13_generators"]			= "paintkit_nosorog,1", -- Generators
	
    ["labx8"]					= "gunkit_scope,1", -- Lab X-8 (Outskirts)
    ["l12u_control_monolith"]	= "gunkit_scope,2", -- Monolith Control Center (NPP North)
    ["l13u_warlab"]				= "gunkit_scope,4", -- Monolith War Lab (Generator)
	
    ["l05_bar"]					= "gunkit_duty,1", -- Rostok
    ["l07_military"]			= "gunkit_freedom,1", -- Army Warehouses
    ["l09_deadcity"]			= "gunkit_merc,1", -- Dead City
    ["k00_marsh"]				= "gunkit_cs,1", -- Great Swamp
    ["l02_garbage"]				= "gunkit_loner,1", -- Garbage

}

local ini_trade_map = ini_file("items\\settings\\armor_converter_trade.ltx")

TraderAuto = trader_autoinject.update
function trader_autoinject.update(npc)
    TraderAuto(npc)
    add_kits(npc) -- you define this function ok
end

-- str_explode but they get parsed into numbers
function str_explode_num(str, sep, plain)
	if not (str and sep) then
		printe("!ERROR str_explode | missing parameter str = %s, sep = %s",str,sep)
		callstack()
	end
	if not (sep ~= "" and str:find(sep,1,plain)) then
		return { tonumber(str) }
	end
	local t = {}
	local size = 0
	for s in str:gsplit(sep,plain) do 
		size = size + 1
		t[size] = tonumber(trim(s))
	end
	return t
end

function add_kits(npc)
    local npc_name = npc:section()
    local npc_level = trader_autoinject.supply_level(npc, true)
    if ini_trade_map:section_exist(npc_name) then
        local trade_table = {}
        local n = ini_trade_map:line_count(npc_name)
        for i=0,n-1 do
            _, kit, values = ini_trade_map:r_line_ex(npc_name, i)
            values = str_explode_num(values, ",")
            if npc_level and npc_level >= values[2] then
                trade_table[kit] = values[1]
            end
        end
	if not is_empty(trade_table) then
	    trader_autoinject.spawn_items(npc, trade_table, true)
	end
    end 
end

local box_contents = {}

-- monkey patch loot managers
SpawnTreasure = treasure_manager.try_spawn_treasure

function treasure_manager.try_spawn_treasure(box)
    local id = box:id()

	--printf("try_spawn_treasure [%s]",caches[id])
    -- no spawn if the cache is already looted
	if not (treasure_manager.caches[id]) then
		return
	end
    SpawnTreasure(box)
    
    local se_obj = alife_object(box:id()) 
    local lvl = alife():level_name(game_graph():vertex(se_obj.m_game_vertex_id):level_id())
    if map_tiers[lvl] then
        to_spawn = str_explode(map_tiers[lvl], ",")
        if math.random(100) <= tonumber(to_spawn[2]) then
            se_itm = alife_create_item(to_spawn[1], box)
            box_contents[id] = true
        end
    end
end
function actor_on_item_take_from_box(box,itm)
    local id = box:id()
    if box_contents[id] == true then
        box_contents[id] = nil
    end
end

local function save_state(mdata) 
	mdata.box_contents = box_contents
end

local function load_state(mdata) 
	box_contents = mdata.box_contents or {}
end

function on_game_start()
    RegisterScriptCallback("save_state",save_state)
    RegisterScriptCallback("load_state",load_state)
end
